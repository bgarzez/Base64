#ifndef _BASE64_
#define _BASE64_

#include <stdio.h>
#include <stdlib.h>

/**
 * Map numbers from range `[0,63]` to ASCII characters. Used for mapping binary data to Base64
 * string in `b64encode()`.
 */
static const char b64e[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

/**
 * Map from ASCII `'+'-'z'` to numbers in range `[0,63]`. Used for mapping Base64 string characters
 * to binary data in `b64decode()`.
 */
static const char b64d[80] = {
    /* '+' (62) */
    62,
    /* ',' '-' '.' (illegal) */
    64, 64, 64,
    /* '/' (63) */
    63,
    /* '0'-'9' (52-61) */
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
    /* ':' ';' '<' (illegal) */
    64, 64, 64,
    /* '=' (interpreted as 0) */
    0,
    /* '>' '?' '@' (illegal) */
    64, 64, 64,
    /* 'A'-'Z' (0-25) */
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    /* '[' '\' ']' '^' '_' '`' (illegal) */
    64, 64, 64, 64, 64, 64,
    /* 'a'-'z' (26-51) */
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
};

/**
 * Maximum size for random byte generator is `1024` bytes. Arbitrarily chosen, but random byte
 * arrays will be at most this large in memory.
 */
static const int max_rand_size = 0x400;

/**
 * Maximum chunk size for encoding / decding files is `1024` bytes. Arbitrarily chosen, but chunks
 * will be at most this large in memory.
 */
static const size_t max_chunk_size = 0x400;

/**
 * Encode byte array of length `len` into a null-terminated Base64 string of ASCII characters.
 * @param bytes Pointer to byte array containing raw data.
 * @param len Length, in bytes, of `bytes` array.
 * @return Pointer to heap-allocated memory containing the null-terminated Base64 encoded string
 * for the input data. If the memory allocation failed, returns `NULL`.
 */
char* b64encode(unsigned char* bytes, size_t len);

/**
 * Decode null-terminated Base64 string of ASCII characters into byte array.
 * @param enc Pointer to null-terminated Base64 string.
 * @return Pointer to heap-allocated memory containing the byte array decoded from the Base64
 * string. If the memory allocation failed, returns `NULL`.
 */
unsigned char* b64decode(char* enc);

/**
 * Generates a random-size array (up to `max_rand_size` bytes) filled with random bytes. Stores
 * bytes in user-defined out parameter. If memory allocation failed, points out-parameter to NULL.
 * @param dest_ptr Pointer to a pointer where the function stores the result (an out-parameter).
 * @return Length of generated byte array. If the memory allocation failed, returns `0`.
 */
size_t generate_bytes(unsigned char** dest_ptr);

/**
 * Encodes a file of binary data and stores the encoded Base64 string in an output file. The string
 * stored in the output file is not null-terminated.
 * @param in_file Input file pointer (to file with binary data).
 * @param out_file Output file pointer (to file with encoded Base64 string).
 * @return If successful, returns `0`. On error, returns `1`.
 */
int encode_file(FILE* in_file, FILE* out_file);

/**
 * Decodes a file containing a Base64 string (which is not null-terminated) and stores the decoded
 * binary data in an output file.
 * @param in_file Input file pointer (to file with Base64 string).
 * @param out_file Output file pointer (to file with decoded binary data).
 * @return If successful, returns `0`. On error, returns `1`.
 */
int decode_file(FILE* in_file, FILE* out_file);

#endif